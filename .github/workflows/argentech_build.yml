# Periodically compare this script to test_chibios.yml. They should be kept
# mostly in sync. Mainly make sure this is running the same docker image and
# toolchain. I've done a lot of awkward things in the matrix strategy to
# minimize the differences between the two files to make it easier to keep them
# in sync.
name: ArgenTech Build

on:
  workflow_dispatch:

concurrency:
  group: ci-${{github.workflow}}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    container: ardupilot/ardupilot-dev-${{ matrix.toolchain }}:v0.1.3
    strategy:
      fail-fast: false  # don't cancel if a job from the matrix fails
      matrix:
        config: [
            default, # Makes it easier to keep merged to have this single config
        ]
        toolchain: [
            chibios,
            #chibios-clang,
        ]
        gcc: [10]
        exclude:
          - gcc: 10
            toolchain: chibios-clang

    steps:
      # git checkout the PR
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      # Put ccache into github cache for faster build
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        run: |
          NOW=$(date -u +"%F-%T")
          echo "timestamp=${NOW}" >> $GITHUB_OUTPUT
      - name: ccache cache files
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{github.workflow}}-ccache-${{matrix.config}}-${{ matrix.toolchain }}-${{ matrix.gcc }}-${{steps.ccache_cache_timestamp.outputs.timestamp}}
          restore-keys: ${{github.workflow}}-ccache-${{matrix.config}}-${{ matrix.toolchain }}-${{ matrix.gcc }}  # restore ccache from either previous build on this branch or on master
      - name: setup ccache
        run: |
          . .github/workflows/ccache.env
      - name: Build all supported flight controllers
        shell: bash
        run: |
          boards=(
            "CubeBlack"
            "CubeOrange"
            "CubeOrangePlus"
            "Pixhawk1"
            "Pixhawk4"
            "Pixhawk6C"
            "MatekH743"
          )
          for board in "${boards[@]}"; do
            echo "Compiling ArduPlane for $board..."
            ./waf configure --board "$board"
            ./waf plane
          done
          echo "Script completed successfully."
      - name: Install zip utility
        run: sudo apt-get install zip
      - name: Archive build output
        run: |
          echo build/*/bin/ | xargs -n 1 cp -v ArduPlane/ReleaseNotes.txt
          cp -v ArduPlane/ReleaseNotes.txt build/
          zip -r build-output.zip build/*/bin/*
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compiled-output
          path: build-output.zip
          retention-days: 90
